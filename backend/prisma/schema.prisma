// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator dbml {
//     provider = "prisma-dbml-generator"
// }

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum Status {
    ONLINE
    OFFLINE
    BUSY
    AFK
}

enum ChannelMode {
    PRIVATE
    PUBLIC
    PROTECTED
}

model User {
    id                Int             @id @default(autoincrement())
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt()
    lastConnexionPing Int?            @default(0)
    role              Role            @default(USER)
    login             String          @unique
    username          String          @unique
    hash              String          @unique
    user42            Boolean         @default(true)
    profile           Profile?
    channelsOwned     Channel[]       @relation(name: "OwnedChannel")
    channelsInvited   Channel[]       @relation(name: "Whitelist")
    channelsAdmin     Channel[]       @relation(name: "Administrators")
    channelsBan       Channel[]       @relation(name: "Bans")
    messagesSent      Message[]       @relation("sender")
    messagesReceived  Message[]       @relation("receiver")
    friendReqSent     FriendRequest[] @relation("friendReqSender")
    friendReqReceived FriendRequest[] @relation("friendReqReceiver")
    gameAsWinner      Game[]          @relation(name: "Player1")
    gameAsLooser      Game[]          @relation(name: "Player2")
    friends           User[]          @relation(name: "friends")
    friendsAddedMe    User[]          @relation(name: "friends")
    blockedUsers      User[]          @relation(name: "blocked")
    blockedByUsers    User[]          @relation(name: "blocked")
    channelId         Int?
    muted             Mute[]          @relation("userMuted")
    otpEnabled        Boolean         @default(false)
    otpValidated      Boolean         @default(false)
    otp_secret        String?
    otp_url           String?

    @@map("users")
}

model Profile {
    id             Int           @id @default(autoincrement())
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt()
    bio            String        @default("")
    winCount       Int           @default(0)
    loseCount      Int           @default(0)
    profilePicture String        @default("default.png")
    eloMatchMaking Int           @default(1200)
    userId         Int           @unique
    user           User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    achievements   Achievement[]

    @@map("profiles")
}

model Message {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt()
    content       String?
    isPrivMessage Boolean?
    senderId      Int?
    sender        User?    @relation("sender", fields: [senderId], references: [id])
    receiverId    Int?
    receiver      User?    @relation("receiver", fields: [receiverId], references: [id])

    channelId Int?
    Channel   Channel? @relation(name: "Channel", fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("messages")
}

model Mute {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt()
    mutedPlayer   User     @relation("userMuted", fields: [mutedPlayerId], references: [id])
    mutedPlayerId Int
    channel       Channel  @relation("channelMute", fields: [channelId], references: [id])
    channelId     Int
}

model FriendRequest {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt()
    senderId   Int?
    sender     User?    @relation("friendReqSender", fields: [senderId], references: [id])
    receiverId Int?
    receiver   User?    @relation("friendReqReceiver", fields: [receiverId], references: [id])
}

model Channel {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt()
    channelName  String   @unique
    ownerId      Int?
    owner        User?    @relation(name: "OwnedChannel", fields: [ownerId], references: [id])
    invitedUsers User[]   @relation(name: "Whitelist")
    adminUsers   User[]   @relation(name: "Administrators")
    banUsers     User[]   @relation(name: "Bans")

    password String?
    messages Message[]   @relation(name: "Channel")
    mode     ChannelMode @default(PUBLIC)
    muted    Mute[]      @relation("channelMute")

    @@map("channels")
}

model Game {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt()
    winner      User?    @relation(name: "Player1", fields: [player1Id], references: [id])
    player1Id   Int?
    looser      User?    @relation(name: "Player2", fields: [player2Id], references: [id])
    player2Id   Int?
    winnerScore Int?
    looserScore Int?

    @@map("games")
}

model Achievement {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt()
    title       String    @db.Char(255)
    description String    @db.Char(255)
    picture     String    @db.Char(255)
    rank        Int?
    user        Profile[]

    @@map("achievements")
}
